
00010f04 | 00260f04  00010f18  00000004  00000000  00010f18 # load program pointer
00010f18 | 00000000  00010f2c  00000001  00000000  00010f2c # read byte from program
00010f2c | 00010000  00010f40  00000001  00000000  00010f40 # read opcode value
00010f40 | 00010a00  00010f64  00000004  00000000  00010f54 # look up opcode in jump table

00010f54 | 00010f54  00010f54  00000000  00000000  00000000 # jump trampoline
00010f68 | 00010f68  00010f68  00000000  00000000  00000000 
00010f7c | 00010f7c  00010f7c  00000000  00000000  00000000 

increase dword by one
00010f90 | 00000000  00010fb8  00000001  00000000  00010fa4 # read byte from [arg0]
00010fa4 | 00010f90  00010fbc  00000004  00000000  00010fb8 # copy arg0
00010fb8 | 00010100  00000000  00000001  00000000  00010fcc # add 1 to byte, write back to [arg0]
00010fcc | 00010f90  00010fe0  00000004  00000000  00010fe0 # copy arg0
00010fe0 | 00000000  00010ff4  00000001  00000000  00010ff4 # read byte from [arg0]
00010ff4 | 00010300  00011009  00000001  00000000  00011008 # mask byte to 08 for 00 and 09 otherwise
00011008 | 00010800  00010f78  00000004  00000000  00010f68 # jump to 0001101c or 00010f54

0001101c | 00010f90  00011058  00000004  00000000  00011030 # copy address
00011030 | 00010f90  00011044  00000001  00000000  00011044 # copy low byte of address
00011044 | 00010100  00011058  00000001  00000000  00011058 # add 1 to byte
00011058 | 00000000  00011080  00000001  00000000  0001106c # read next byte
0001106c | 00011058  00011084  00000004  00000000  00011080 
00011080 | 00010100  00000000  00000001  00000000  00011094 
00011094 | 00011058  000110a8  00000004  00000000  000110a8 
000110a8 | 00000000  000110bc  00000001  00000000  000110bc 
000110bc | 00010300  000110d1  00000001  00000000  000110d0 
000110d0 | 00010804  00010f78  00000004  00000000  00010f68 

000110e4 | 00011058  00011120  00000004  00000000  000110f8 
000110f8 | 00011058  0001110c  00000001  00000000  0001110c 
0001110c | 00010100  00011120  00000001  00000000  00011120 
00011120 | 00000000  00011148  00000001  00000000  00011134 
00011134 | 00011120  0001114c  00000004  00000000  00011148 
00011148 | 00010100  00000000  00000001  00000000  0001115c 
0001115c | 00011120  00011170  00000004  00000000  00011170 
00011170 | 00000000  00011184  00000001  00000000  00011184 
00011184 | 00010300  00011199  00000001  00000000  00011198 
00011198 | 00010808  00010f78  00000004  00000000  00010f68 

000111ac | 00011120  000111e8  00000004  00000000  000111c0 
000111c0 | 00011120  000111d4  00000001  00000000  000111d4 
000111d4 | 00010100  000111e8  00000001  00000000  000111e8 
000111e8 | 00000000  00011210  00000001  00000000  000111fc 
000111fc | 000111e8  00011214  00000004  00000000  00011210 
00011210 | 00010100  00000000  00000001  00000000  00010f54 

decrease dword by one
00011224 | 00000000  0001124c  00000001  00000000  00011238 # get byte from pointer
00011238 | 00011224  00011250  00000004  00000000  0001124c # copy pointer
0001124c | 00010200  00000000  00000001  00000000  00011260 # decrement and store
00011260 | 00011224  00011274  00000004  00000000  00011274 
00011274 | 00000000  00011288  00000001  00000000  00011288 
00011288 | 00010400  0001129d  00000001  00000000  0001129c 
0001129c | 0001080c  00010f78  00000004  00000000  00010f68 

000112b0 | 00011224  000112ec  00000004  00000000  000112c4 
000112c4 | 00011224  000112d8  00000001  00000000  000112d8 
000112d8 | 00010100  000112ec  00000001  00000000  000112ec 
000112ec | 00000000  00011314  00000001  00000000  00011300 
00011300 | 000112ec  00011318  00000004  00000000  00011314 
00011314 | 00010200  00000000  00000001  00000000  00011328 
00011328 | 000112ec  0001133c  00000004  00000000  0001133c 
0001133c | 00000000  00011350  00000001  00000000  00011350 
00011350 | 00010400  00011365  00000001  00000000  00011364 
00011364 | 00010810  00010f78  00000004  00000000  00010f68 

00011378 | 000112ec  000113b4  00000004  00000000  0001138c 
0001138c | 000112ec  000113a0  00000001  00000000  000113a0 
000113a0 | 00010100  000113b4  00000001  00000000  000113b4 
000113b4 | 00000000  000113dc  00000001  00000000  000113c8 
000113c8 | 000113b4  000113e0  00000004  00000000  000113dc 
000113dc | 00010200  00000000  00000001  00000000  000113f0 
000113f0 | 000113b4  00011404  00000004  00000000  00011404 
00011404 | 00000000  00011418  00000001  00000000  00011418 
00011418 | 00010400  0001142d  00000001  00000000  0001142c 
0001142c | 00010814  00010f78  00000004  00000000  00010f68 

00011440 | 000113b4  0001147c  00000004  00000000  00011454 
00011454 | 000113b4  00011468  00000001  00000000  00011468 
00011468 | 00010100  0001147c  00000001  00000000  0001147c 
0001147c | 00000000  000114a4  00000001  00000000  00011490 
00011490 | 0001147c  000114a8  00000004  00000000  000114a4 
000114a4 | 00010200  00000000  00000001  00000000  00010f54 

000114b8 | 000114c4  00010f90  00000004  00260f04  000114cc # increase tape pointer
000114cc | 000114d8  00010f64  00000004  00010f04  00010f90 # jump to start of loop

000114e0 | 00000000  00000000  00000000  00000000  00000000 # compare result
000114f4 | 00000000  00000000  00000000  00000000  00000000 # variable, return to 00011940
00011508 | 00000000  00000000  00000000  00000000  00000000 # variable, return to increase/decrease

0001151c | 00011508  00010840  00000004  00000000  00011530 # store branch address
00011530 | 000114f4  00010940  00000004  00000000  00011544 # store branch address
00011544 | 000114e0  00011558  00000004  00000000  00011558 # load compare result
00011558 | 00000000  0001156c  00000001  00000000  0001156c # read byte
0001156c | 00010300  00011581  00000001  00000000  00011580 # look up, 08 if 00
00011580 | 00010840  00010f78  00000004  00000000  00010f68 # do branch

00011594 | 00000000  00000000  00000000  00000000  00000000 
000115a8 | 00000000  00000000  00000000  00000000  00000000 
000115bc | 00000000  00000000  00000000  00000000  00000000 

000115d0 | 00011594  000114e0  00000004  00000000  000115e4 
000115e4 | 000115a8  000114f4  00000004  00000000  000115f8 
000115f8 | 00011604  00011508  00000004  0001160c  0001151c 
0001160c | 00011618  00010f90  00000004  00011594  00011620 
00011620 | 0001162c  00010f64  00000004  00011634  00010f90

00011634 | 00011594  000114e0  00000004  00000000  00011648 
00011648 | 000115a8  000114f4  00000004  00000000  0001165c 
0001165c | 00011668  00011508  00000004  00011670  0001151c 
00011670 | 0001167c  00010f90  00000004  00011594  00011684 
00011684 | 00011690  00010f64  00000004  00011698  00010f90 

00011698 | 00011594  000114e0  00000004  00000000  000116ac 
000116ac | 000115a8  000114f4  00000004  00000000  000116c0 
000116c0 | 000116cc  00011508  00000004  000116d4  0001151c 
000116d4 | 000116e0  00010f90  00000004  00011594  000116e8 
000116e8 | 000116f4  00010f64  00000004  000116fc  00010f90 

000116fc | 00011594  000114e0  00000004  00000000  00011710 
00011710 | 000115a8  000114f4  00000004  00000000  00011724 
00011724 | 00011730  00011508  00000004  00011738  0001151c 
00011738 | 00011744  00010f90  00000004  00011594  0001174c 
0001174c | 00011758  00010f64  00000004  00011760  00010f90 

00011760 | 000115bc  00011784  00000004  00000000  00011774 
00011774 | 00011774  00011774  00000000  00000000  00000000 

00011788 | 00000000  00000000  00000000  00000000  00000000 # variable, comparison value
0001179c | 00000000  00000000  00000000  00000000  00000000 # variable, tape pointer
000117b0 | 00000000  00000000  00000000  00000000  00000000 # variable, return to 00011940
000117c4 | 00000000  00000000  00000000  00000000  00000000 # variable, return to increase/decrease

000117d8 | c84ab0a0  00010600  00000100  00000000  000117ec # copying full unk_B0A0 table? (clear mem?)
000117ec | c84ab0a0  000114e0  0000003c  00000000  00011800 # copying some extra data? (clear mem?)
00011800 | 00011788  00011814  00000004  00000000  00011814 # load compare value
00011814 | 00000000  0001182c  00000001  00000000  00011828 # load byte0 of compare value
00011828 | c84a89d4  00010600  00000001  00000000  0001183c # load 0x31 and store it in offset in table
0001183c | 0001179c  00011850  00000004  00000000  00011850 # load tape pointer
00011850 | 00000000  00011870  00000001  00000000  00011864 # load byte from tape pointer
00011864 | 00011870  000114e0  00000004  00010600  00011878 # store, if both compared bytes are the same it's 31
00011878 | 000117b0  000114f4  00000004  00000000  0001188c # load return address
0001188c | 000117c4  00011508  00000004  00000000  0001151c # call function

000118a0 | 00000000  00000000  00000000  00000000  00000000 # variable, comparison value
000118b4 | 00000000  00000000  00000000  00000000  00000000 # variable, tape pointer
000118c8 | 00000000  00000000  00000000  00000000  00000000 # variable, next opcode function
000118dc | 00000000  00000000  00000000  00000000  00000000 # variable, return to increase/decrease

000118f0 | 000118a0  00011788  00000004  00000000  00011904 # load comparison value
00011904 | 000118b4  0001179c  00000004  00000000  00011918 # load tape pointer
00011918 | 00011924  000117b0  00000004  00011940  0001192c # load return to 00011940
0001192c | 000118dc  000117c4  00000004  00000000  000117d8 # load return to increase/decrease, call function

00011940 | 0001194c  00010f90  00000004  000118a0  00011954 # increase comparison value
00011954 | 00011960  00010f64  00000004  00011968  00010f90 
00011968 | 00011974  00010f90  00000004  000118b4  0001197c # increase tape pointer
0001197c | 00011988  00010f64  00000004  00011990  00010f90 

00011990 | 000118a0  00011788  00000004  00000000  000119a4 # load comparison value
000119a4 | 000118b4  0001179c  00000004  00000000  000119b8 # load tape pointer
000119b8 | 000119c4  000117b0  00000004  000119e0  000119cc # load return to 000119e0
000119cc | 000118dc  000117c4  00000004  00000000  000117d8 # load return to increase/decrease, call function

000119e0 | 000119ec  00010f90  00000004  000118a0  000119f4 # increase comparison value
000119f4 | 00011a00  00010f64  00000004  00011a08  00010f90
00011a08 | 00011a14  00010f90  00000004  000118b4  00011a1c # increase tape pointer 
00011a1c | 00011a28  00010f64  00000004  00011a30  00010f90 

00011a30 | 000118a0  00011788  00000004  00000000  00011a44 # load comparison value
00011a44 | 000118b4  0001179c  00000004  00000000  00011a58 # load tape pointer
00011a58 | 00011a64  000117b0  00000004  00011a80  00011a6c # load return to 00011a80
00011a6c | 000118dc  000117c4  00000004  00000000  000117d8 # load return to increase/decrease, call function

00011a80 | 00011a8c  00010f90  00000004  000118a0  00011a94 # increase comparison value
00011a94 | 00011aa0  00010f64  00000004  00011aa8  00010f90 
00011aa8 | 00011ab4  00010f90  00000004  000118b4  00011abc # increase tape pointer 
00011abc | 00011ac8  00010f64  00000004  00011ad0  00010f90 

00011ad0 | 000118a0  00011788  00000004  00000000  00011ae4 # load comparison value
00011ae4 | 000118b4  0001179c  00000004  00000000  00011af8 # load tape pointer
00011af8 | 00011b04  000117b0  00000004  00011b20  00011b0c # load return to 00011b20
00011b0c | 000118dc  000117c4  00000004  00000000  000117d8 # load return to increase/decrease, call function

00011b20 | 00011b2c  00010f90  00000004  000118a0  00011b34 # increase comparison value
00011b34 | 00011b40  00010f64  00000004  00011b48  00010f90 
00011b48 | 00011b54  00010f90  00000004  000118b4  00011b5c # increase tape pointer 
00011b5c | 00011b68  00010f64  00000004  00011b70  00010f90 
00011b70 | 000118c8  00011b94  00000004  00000000  00011b84 # next opcode function
00011b84 | 00011b84  00011b84  00000000  00000000  00000000 

00011b98 | 00000000  00000000  00000000  00000000  00000000 # 0047e00c
00011bac | 00000000  00000000  00000000  00000000  00000000 # 00011fdc
00011bc0 | 00000000  00000000  00000000  00000000  00000000 # 00012b44
00011bd4 | 00000000  00000000  00000000  00000000  00000000 # pointer to buffer
00011be8 | 00000000  00000000  00000000  00000000  00000000 # 00011fdc
00011bfc | 00000000  00000000  00000000  00000000  00000000 # 000120ac - return address

00011c10 | 00011bc0  00011c24  00000004  00000000  00011c24 
00011c24 | 00000000  00011c75  00000001  00000000  00011c38 
00011c38 | 00011bd4  00011c4c  00000004  00000000  00011c4c 
00011c4c | 00000000  00011c74  00000001  00000000  00011c60 # add two bytes
00011c60 | 00011b98  00011c78  00000004  00000000  00011c74 
00011c74 | 00000000  00000000  00000001  00000000  00011c88 
00011c88 | 00011be8  000114e0  00000004  00000000  00011c9c 
00011c9c | 00011ca8  000114f4  00000004  00011cc4  00011cb0 
00011cb0 | 00011cbc  00011508  00000004  00011d14  0001151c 

00011cc4 | 00011b98  00011cd8  00000004  00000000  00011cd8 
00011cd8 | 00000000  00011d00  00000001  00000000  00011cec 
00011cec | 00011b98  00011d04  00000004  00000000  00011d00 
00011d00 | 00010100  00000000  00000001  00000000  00011d14 # increase byte in [00011b98] by one

00011d14 | 00011bc0  00011d28  00000004  00000000  00011d28 
00011d28 | 00000000  00011d3c  00000001  00000000  00011d3c 
00011d3c | 00010700  00011bcc  00000001  00000000  00011d50 

00011d50 | 00011bd4  00011d64  00000004  00000000  00011d64 
00011d64 | 00000000  00011d78  00000001  00000000  00011d78 
00011d78 | 00010700  00011be0  00000001  00000000  00011d8c 

00011d8c | 00011b98  00011da0  00000004  00000000  00011da0 
00011da0 | 00000000  00011db4  00000001  00000000  00011db4 
00011db4 | 00010700  00011ba4  00000001  00000000  00011dc8 

00011dc8 | 00011dd4  000114e0  00000004  00011ba4  00011ddc 
00011ddc | 00011de8  000114f4  00000004  00011e04  00011df0 
00011df0 | 00011dfc  00011508  00000004  00011e18  0001151c 

00011e04 | c84ab0a0  00011ba4  00000001  00000000  00011e2c 
00011e18 | c84a8a01  00011ba4  00000001  00000000  00011e2c 
00011e2c | 00011e38  000114e0  00000004  00011bcc  00011e40 
00011e40 | 00011e4c  000114f4  00000004  00011e68  00011e54 
00011e54 | 00011e60  00011508  00000004  00011f08  0001151c 
00011e68 | 00011e74  000114e0  00000004  00011be0  00011e7c 
00011e7c | 00011e88  000114f4  00000004  00011ea4  00011e90 
00011e90 | 00011e9c  00011508  00000004  00011ecc  0001151c 

00011ea4 | 00011bac  00011ebc  00000004  00000000  00011eb8 
00011eb8 | c84a89ff  00000000  00000001  00000000  00011fa8 
00011ecc | 00011bac  00011ef8  00000004  00000000  00011ee0 
00011ee0 | 00011ba4  00011ef4  00000004  00000000  00011ef4 
00011ef4 | 00000000  00000000  00000001  00000000  00011fa8 
00011f08 | 00011f14  000114e0  00000004  00011be0  00011f1c 
00011f1c | 00011f28  000114f4  00000004  00011f44  00011f30 
00011f30 | 00011f3c  00011508  00000004  00011f80  0001151c 

00011f44 | 00011bac  00011f70  00000004  00000000  00011f58 
00011f58 | 00011ba4  00011f6c  00000004  00000000  00011f6c 
00011f6c | 00000000  00000000  00000001  00000000  00011fa8 
00011f80 | 00011bac  00011f98  00000004  00000000  00011f94 
00011f94 | c84ab0a0  00000000  00000001  00000000  00011fa8 
00011fa8 | 00011bfc  00011fcc  00000004  00000000  00011fbc 
00011fbc | 00011fbc  00011fbc  00000000  00000000  00000000 

00011fd0 | 00000000  00000000  00000000  00000000  00000000 # 0047e00c
00011fe4 | 00000000  00000000  00000000  00000000  00000000 # 00012b44
00011ff8 | 00000000  00000000  00000000  00000000  00000000 # pointer to buffer
0001200c | 00000000  00000000  00000000  00000000  00000000 # return address

00012020 | c84ab0a0  00011fdc  00000001  00000000  00012034 # clear byte?
00012034 | 00012040  00011be8  00000004  00011fdc  00012048
00012048 | 00012054  00011bac  00000004  00011fdc  0001205c 
0001205c | 00011fd0  00011b98  00000004  00000000  00012070 # copy params 
00012070 | 00011fe4  00011bc0  00000004  00000000  00012084 
00012084 | 00011ff8  00011bd4  00000004  00000000  00012098 
00012098 | 000120a4  00011bfc  00000004  000120ac  00011c10 # call

000120ac | 000120b8  00010f90  00000004  00011fd0  000120c0 
000120c0 | 000120cc  00010f64  00000004  000120d4  00010f90 
000120d4 | 000120e0  00010f90  00000004  00011fe4  000120e8 
000120e8 | 000120f4  00010f64  00000004  000120fc  00010f90 
000120fc | 00012108  00010f90  00000004  00011ff8  00012110 
00012110 | 0001211c  00010f64  00000004  00012124  00010f90 
00012124 | 00011fd0  00011b98  00000004  00000000  00012138 
00012138 | 00011fe4  00011bc0  00000004  00000000  0001214c 
0001214c | 00011ff8  00011bd4  00000004  00000000  00012160 
00012160 | 0001216c  00011bfc  00000004  00012174  00011c10 
00012174 | 00012180  00010f90  00000004  00011fd0  00012188 
00012188 | 00012194  00010f64  00000004  0001219c  00010f90 
0001219c | 000121a8  00010f90  00000004  00011fe4  000121b0 
000121b0 | 000121bc  00010f64  00000004  000121c4  00010f90 
000121c4 | 000121d0  00010f90  00000004  00011ff8  000121d8 
000121d8 | 000121e4  00010f64  00000004  000121ec  00010f90 
000121ec | 00011fd0  00011b98  00000004  00000000  00012200 
00012200 | 00011fe4  00011bc0  00000004  00000000  00012214 
00012214 | 00011ff8  00011bd4  00000004  00000000  00012228 
00012228 | 00012234  00011bfc  00000004  0001223c  00011c10 
0001223c | 00012248  00010f90  00000004  00011fd0  00012250 
00012250 | 0001225c  00010f64  00000004  00012264  00010f90 
00012264 | 00012270  00010f90  00000004  00011fe4  00012278 
00012278 | 00012284  00010f64  00000004  0001228c  00010f90 
0001228c | 00012298  00010f90  00000004  00011ff8  000122a0 
000122a0 | 000122ac  00010f64  00000004  000122b4  00010f90 
000122b4 | 00011fd0  00011b98  00000004  00000000  000122c8 
000122c8 | 00011fe4  00011bc0  00000004  00000000  000122dc 
000122dc | 00011ff8  00011bd4  00000004  00000000  000122f0 
000122f0 | 000122fc  00011bfc  00000004  00012304  00011c10 
00012304 | 0001200c  00012328  00000004  00000000  00012318 
00012318 | 00012318  00012318  00000000  00000000  00000000 

opcode >
0001232c | 00012338  000118a0  00000004  00260f30  00012340 # load 00260f03
00012340 | 0001234c  000118b4  00000004  00260f0c  00012354 # load tape
00012354 | 00012360  000118c8  00000004  000114b8  00012368 # load next opcode function
00012368 | 00012374  000118dc  00000004  0001237c  000118f0 # store return to 0001237c and call
0001237c | 00012388  00010f90  00000004  00260f0c  00012390 # increase tape counter
00012390 | 0001239c  00010f64  00000004  000114b8  00010f90 

opcode <
000123a4 | 000123b0  000118a0  00000004  00260f2c  000123b8 # load 00250f04
000123b8 | 000123c4  000118b4  00000004  00260f0c  000123cc # load tape
000123cc | 000123d8  000118c8  00000004  000114b8  000123e0 # load next opcode function
000123e0 | 000123ec  000118dc  00000004  000123f4  000118f0 # store return and call
000123f4 | 00012400  00011224  00000004  00260f0c  00012408 # decrease tape counter
00012408 | 00012414  00010f64  00000004  000114b8  00011224 

opcode +
0001241c | 00260f0c  00012444  00000004  00000000  00012430 # load tape pointer
00012430 | 00260f0c  0001245c  00000004  00000000  00012444 # load tape pointer
00012444 | 00000000  00012458  00000001  00000000  00012458 # read byte from tape
00012458 | 00010100  00000000  00000001  00000000  000114b8 # increase byte, write back to tape

opcode -
0001246c | 00260f0c  00012494  00000004  00000000  00012480 # load tape pointer
00012480 | 00260f0c  000124ac  00000004  00000000  00012494 # load tape pointer
00012494 | 00000000  000124a8  00000001  00000000  000124a8 # read byte from tape
000124a8 | 00010200  00000000  00000001  00000000  000114b8 # decrease byte, write back to tape

opcode [
000124bc | 00260f0c  000124d0  00000004  00000000  000124d0 # load tape pointer
000124d0 | 00000000  000124e4  00000001  00000000  000124e4 # read byte from tape
000124e4 | 00010300  000124f9  00000001  00000000  000124f8 # test if == 00
000124f8 | 00010818  00010f64  00000004  00000000  00010f54 # branch, 08 = 0001250c, 09 = 000114b8

0001250c | 00012518  00010f90  00000004  00260f08  00012520 # increase brace counter
00012520 | 0001252c  00010f64  00000004  00012534  00010f90 
00012534 | 00012540  00010f90  00000004  00260f04  00012548 # increase program buffer counter
00012548 | 00012554  00010f64  00000004  0001255c  00010f90 
0001255c | 00260f04  00012570  00000004  00000000  00012570 
00012570 | 00000000  00012584  00000001  00000000  00012584 # get byte from program buffer 
00012584 | 00010500  00012598  00000001  00000000  00012598 # get lookup table byte
00012598 | 00010c00  00010f64  00000004  00000000  00010f54 # branch on character

000125ac | 000125b8  00011224  00000004  00260f08  000125c0 # decrease brace counter
000125c0 | 000125cc  00010f64  00000004  000125d4  00011224 
000125d4 | 00260f08  000125e8  00000001  00000000  000125e8 # get byte0 from brace counter
000125e8 | 00010300  000125fd  00000001  00000000  000125fc # test if == 00
000125fc | 0001081c  00010f64  00000004  00000000  00010f54 
00012610 | 00260f09  00012624  00000001  00000000  00012624 
00012624 | 00010300  00012639  00000001  00000000  00012638 
00012638 | 00010820  00010f64  00000004  00000000  00010f54 
0001264c | 00260f0a  00012660  00000001  00000000  00012660 
00012660 | 00010300  00012675  00000001  00000000  00012674 
00012674 | 00010824  00010f64  00000004  00000000  00010f54 
00012688 | 00260f0b  0001269c  00000001  00000000  0001269c 
0001269c | 00010300  000126b1  00000001  00000000  000126b0 
000126b0 | 00010828  00010f64  00000004  00000000  00010f54 


opcode ]
000126c4 | 00260f0c  000126d8  00000004  00000000  000126d8 # load tape pointer
000126d8 | 00000000  000126ec  00000001  00000000  000126ec # read byte from tape
000126ec | 00010300  00012701  00000001  00000000  00012700 # test if == 00
00012700 | 0001082c  00010f64  00000004  00000000  00010f54 # branch, 08 = 000114b8, 09 = 00012714

00012714 | 00012720  00010f90  00000004  00260f08  00012728 # increase brace counter
00012728 | 00012734  00010f64  00000004  0001273c  00010f90 
0001273c | 00012748  00011224  00000004  00260f04  00012750 # decrease program buffer counter 
00012750 | 0001275c  00010f64  00000004  00012764  00011224
00012764 | 00260f04  00012778  00000004  00000000  00012778 
00012778 | 00000000  0001278c  00000001  00000000  0001278c # get byte from program buffer
0001278c | 00010500  000127a0  00000001  00000000  000127a0 # get lookup table byte
000127a0 | 00010b00  00010f64  00000004  00000000  00010f54 # branch on character

000127b4 | 000127c0  00011224  00000004  00260f08  000127c8 # decrease brace counter
000127c8 | 000127d4  00010f64  00000004  000127dc  00011224 
000127dc | 00260f08  000127f0  00000001  00000000  000127f0 # get byte0 from brace counter
000127f0 | 00010300  00012805  00000001  00000000  00012804 # test if == 00
00012804 | 00010830  00010f64  00000004  00000000  00010f54 # branch, 08 = 00012818, 09 = 0001273c

00012818 | 00260f09  0001282c  00000001  00000000  0001282c # get byte1 from brace counter
0001282c | 00010300  00012841  00000001  00000000  00012840 # test if == 00
00012840 | 00010834  00010f64  00000004  00000000  00010f54 # branch, 08 = 00012854, 09 = 0001273c

00012854 | 00260f0a  00012868  00000001  00000000  00012868 # get byte2 from brace counter
00012868 | 00010300  0001287d  00000001  00000000  0001287c # test if == 00
0001287c | 00010838  00010f64  00000004  00000000  00010f54 # branch, 08 = 00012890, 09 = 0001273c

00012890 | 00260f0b  000128a4  00000001  00000000  000128a4 # get byte3 from brace counter
000128a4 | 00010300  000128b9  00000001  00000000  000128b8 # test if == 00
000128b8 | 0001083c  00010f64  00000004  00000000  00010f54 # branch, 08 = 000114b8, 09 = 0001273c

opcode ,
000128cc | c84a89d4  0047e020  00000001  00000000  000128e0 # load some nonzero byte
000128e0 | 00260f0c  000128f8  00000004  00000000  000128f4 # store tape address
000128f4 | 0047e021  00000000  00000001  00000000  000114b8 # store read byte

opcode .
00012908 | 00260f0c  0001291c  00000004  00000000  0001291c # store tape address
0001291c | 00000000  0047e023  00000001  00000000  00012930 # store byte to write
00012930 | c84a89c3  0047e022  00000001  00000000  000114b8 # load some nonzero byte

opcode #
00012944 | 00260f0c  00012958  00000004  00000000  00012958 # get tape pointer
00012958 | 00000000  0001296c  00000001  00000000  0001296c # get byte from tape
0001296c | 00010d00  00012980  00000001  00000000  00012980 # lookup interrupt
00012980 | 00010e00  000129a4  00000004  00000000  00012994 # lookup jump table
00012994 | 00012994  00012994  00000000  00000000  00000000 # jump

syscall 80
000129a8 | 00260f34  0047e004  00000004  00000000  000129bc # place value 00000001 into param0
000129bc | 00260f0c  0047e01c  00000004  00000000  000129d0 
000129d0 | 000129dc  00010f90  00000004  0047e01c  000129e4 # increase stored pointer
000129e4 | 000129f0  00010f64  00000004  000129f8  00010f90 
000129f8 | 0047e01c  00012a0c  00000004  00000000  00012a0c 
00012a0c | 00000000  0047e008  00000001  00000000  00012a20 
00012a20 | c84a89f5  0047e000  00000001  00000000  000114b8 

syscall 83
00012a34 | 00260f40  0047e004  00000004  00000000  00012a48 # place value 00000003 into param0
00012a48 | 00260f0c  0047e01c  00000004  00000000  00012a5c # place tape pointer into param6
00012a5c | 00012a68  00010f90  00000004  0047e01c  00012a70 # increase stored pointer
00012a70 | 00012a7c  00010f64  00000004  00012a84  00010f90
00012a84 | 0047e01c  00012a98  00000004  00000000  00012a98 # copy increased pointer
00012a98 | 00000000  0047e008  00000001  00000000  00012aac # store in param1
00012aac | 00012ab8  00010f90  00000004  0047e01c  00012ac0 # increase stored pointer
00012ac0 | 00012acc  00010f64  00000004  00012ad4  00010f90
00012ad4 | 0047e01c  00012ae8  00000004  00000000  00012ae8 # copy increased pointer 
00012ae8 | 00000000  0047e010  00000001  00000000  00012afc # store in param3
00012afc | 00012b08  00010f90  00000004  0047e01c  00012b10 # increase stored pointer
00012b10 | 00012b1c  00010f64  00000004  00012b24  00010f90 
00012b24 | 00012b30  00011fd0  00000004  0047e00c  00012b38 # store pointer in otherparm
00012b38 | 00012b38  00012b38  00000000  b7db0f04  00012b4c 
00012b4c | 00012b58  00011fe4  00000004  00012b44  00012b60 # store address 00012b44 in param2
00012b60 | 0047e01c  00011ff8  00000004  00000000  00012b74 
00012b74 | 00012b80  0001200c  00000004  00012b88  00012020 # call something
00012b88 | c84a89fd  0047e000  00000001  00000000  000114b8 # trigger syscall

sycall 84
00012b9c | 00260f44  0047e004  00000004  00000000  00012bb0 
00012bb0 | 00260f0c  0047e01c  00000004  00000000  00012bc4 
00012bc4 | 00012bd0  00010f90  00000004  0047e01c  00012bd8 
00012bd8 | 00012be4  00010f64  00000004  00012bec  00010f90 
00012bec | 0047e01c  00012c00  00000004  00000000  00012c00 
00012c00 | 00000000  0047e008  00000001  00000000  00012c14 
00012c14 | 00012c20  00010f90  00000004  0047e01c  00012c28 
00012c28 | 00012c34  00010f64  00000004  00012c3c  00010f90 
00012c3c | 0047e01c  00012c50  00000004  00000000  00012c50 
00012c50 | 00000000  0047e010  00000001  00000000  00012c64 
00012c64 | 00012c70  00010f90  00000004  0047e01c  00012c78 
00012c78 | 00012c84  00010f64  00000004  00012c8c  00010f90 
00012c8c | 00012c98  00011fd0  00000004  0047e00c  00012ca0 
00012ca0 | 00012ca0  00012ca0  00000000  b7db0f04  00012cb4 
00012cb4 | 00012cc0  00011fe4  00000004  00012cac  00012cc8 
00012cc8 | 0047e01c  00011ff8  00000004  00000000  00012cdc 
00012cdc | 00012ce8  0001200c  00000004  00012cf0  00012020 
00012cf0 | c84a89fd  0047e000  00000001  00000000  000114b8 
